using Microsoft.AspNetCore.Authorization;
using Retech.Application.Models.RequestModels.Users;
using Retech.Application.Models.ResponeModels.Users;
using Microsoft.AspNetCore.Mvc;
using Retech.Application.Services;
using Retech.Core.Settings;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.Google;
using Retech.Application.Models;


namespace Retech.API.Controllers;

public class UserController(IUserService userService, Authentication authentication, IConfiguration configuration)
        : ApiController
{
    [HttpPost]
    [AllowAnonymous]
    public async Task<IActionResult> RegisterAsync(CreateUserModel createUserModel)
    {
        return Ok(ApiResult<CreateUserResponseModel>.Success(await userService.CreateAsync(createUserModel)));
    }


    //[HttpPost("create-tour-guide")]
    //public async Task<IActionResult> AddTourGuideAsync(CreateUserWithNoPasswordRequest request)
    //{
    //    await userService.CreateUserWithAutoGeneratedPassword(request, UserRoleConstants.TOUR_GUIDE);
    //    return Ok(ApiResult.Success());
    //}


    [HttpPost("authenticate")]
    [AllowAnonymous]
    public async Task<IActionResult> LoginAsync(LoginUserModel loginUserModel)
    {
        await userService.LoginCookiesAsync(loginUserModel);
        return Ok(ApiResult.Success());
    }

    [HttpPost("authenticate-with-response")]
    [AllowAnonymous]
    public async Task<IActionResult> LoginWithResponseAsync(LoginUserModel loginUserModel)
    {
        return Ok(ApiResult<LoginResponseModel>.Success(await userService.LoginAsync(loginUserModel)));
    }

    [HttpPost("confirm-email")]
    public async Task<IActionResult> ConfirmEmailAsync(ConfirmEmailModel confirmEmailModel)
    {
        return Ok(ApiResult<ConfirmEmailResponseModel>.Success(
            await userService.ConfirmEmailAsync(confirmEmailModel)));
    }

    [HttpPut("change-password")]
    [Authorize]
    public async Task<IActionResult> ChangePassword(ChangePasswordModel changePasswordModel)
    {
        return Ok(ApiResult<BaseResponseModel>.Success(
            await userService.ChangePasswordAsync(UserId, changePasswordModel)));
    }

    //[HttpPost("refresh-token")]
    //public async Task<IActionResult> RefreshToken()
    //{
    //    await userService.RefreshToken();
    //    return Ok(ApiResult.Success());
    //}

    [HttpPost("logout")]
    [Authorize]
    public async Task<IActionResult> Logout()
    {
        await userService.Logout();
        return Ok(ApiResult.Success());
    }

    [HttpGet("{userId}")]
    public async Task<IActionResult> GetDetails(Guid userId)
    {
        return Ok(ApiResult<UserResponse>.Success(await userService.GetDetails(userId)));
    }

    [HttpGet("me")]
    public async Task<IActionResult> GetMe()
    {
        return Ok(ApiResult<UserResponse>.Success(await userService.GetDetails(UserId)));
    }

    [HttpPost("/auth/facebook")]
    public async Task<IActionResult> ExternalLogin(string accessToken)
    {
        await userService.LoginWithFacebookAsync(accessToken);
        return Ok(ApiResult.Success());
    }

    [HttpPost("send-phone-verify-code")]
    public async Task<IActionResult> SendPhoneVerificationCode(SendCodeRequest request)
    {
        await userService.SendPhoneVerificationCode(request, UserId);
        return Ok(ApiResult.Success());
    }
    [HttpPost("verify-phone")]
    public async Task<IActionResult> VerifyPhoneNumber(VerifyPhoneNumberRequest request)
    {
        await userService.VerifyPhoneNumber(request, UserId);
        return Ok(ApiResult.Success());
    }
    [HttpGet("auth/google")]
    public async Task<IActionResult> GgCallbackPath()
    {
        var result = await HttpContext.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        if (!result.Succeeded || result.Principal == null)
            return Redirect(authentication.Google.UrlReturnFail);

        var claims = result.Principal.Identities.FirstOrDefault()?.Claims.Select(claim => claim);
        if (claims == null! || !claims.Any()) return BadRequest();

        await userService.LoginGoogle(claims);
        //return Content("<script>window.opener.postMessage('success', '*'); window.close();</script>", "text/html");
        return Redirect(authentication.Google.UrlReturnSuccess);

    }

    [HttpGet("login/google")]
    public IActionResult LoginGg()
    {
        var redirectUrl = Url.Action("GgCallbackPath", "Users", new { ReturnUrl = authentication.Google.UrlCallback });
        var properties = new AuthenticationProperties { RedirectUri = redirectUrl };
        return Challenge(properties, GoogleDefaults.AuthenticationScheme);
    }

    //[HttpGet("tourGuides")]
    //public async Task<IActionResult> GetTourGuides([FromQuery] string? email = null!, string? name = null!, string? username = null, Guid? orderId = null!, string? sortOption = null!, int? pageIndex = null!, int? pageSize = null!, bool? filterAvailable = null)
    //{
    //    return Ok(ApiResult<PaginationItem<TourGuideResponse>>.Success(await userService.GetTourGuides(email, name, username, orderId, sortOption, pageIndex, pageSize, filterAvailable)));
    //}

    //[HttpGet("tourGuide/{id}")]
    //public async Task<IActionResult> GetTourGuides([FromRoute] Guid id)
    //{
    //    return Ok(ApiResult<UserResponse>.Success(await userService.GetTourGuide(id)));
    //}

    [HttpGet("check-login-status")]
    public IActionResult CheckLoginStatus()
    {
        if (User.Identity.IsAuthenticated)
        {
            return Ok(ApiResult<string>.Success(authentication.Google.UrlReturnSuccess));
        }
        return Ok(ApiResult<string>.Success(authentication.Google.UrlReturnFail));
    }


    //[HttpGet("users")]
    //public async Task<IActionResult> GetUsers(string? email = null!, string? name = null!, GenderEnum? gender = null!, string? username = null, string? phone = null, string? sortOption = null!, int? pageIndex = null!, int? pageSize = null!)
    //{
    //    return Ok(ApiResult<PaginationItem<ApplicationUser, UserResponse>>.Success(await userService.GetUsers(name, gender, username, email, phone, sortOption, pageIndex, pageSize)));

    //}
}

